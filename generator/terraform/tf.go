package terraform

import (
  "fmt"
  "github.com/hashicorp/hcl/v2/hclwrite"
  "github.com/preset-io/mpc-init/generator"
  "io/ioutil"
  "log"
  "os"
  "path/filepath"
  "strings"
)

const (
  presetAdminRole  = "preset-admin"
  clientAccessRole = "mpc-account-mgmt"
)

func GenTf(PolicyRoleMap []*generator.PolicyRoleMapping, policiesPath string) {
  cwd, err := os.Getwd()
  if err != nil {
    log.Fatalf("Failed to get current working directory: %v", err)
  }

  modulePath := filepath.Join(cwd, fmt.Sprintf("modules/mpc_iam_init"))

  account := "${var.aws_account_id}"
  presetDevOpsAccount := "${var.preset_devops_aws_account_id}"
  presetTargetEnvAccount := "${var.preset_target_env_account_id}"

  var body []string
  body = append(body, "# The content of this file is autogenerated by the generator.")
  body = append(body, createRole(presetAdminRole, []string{presetTargetEnvAccount, presetDevOpsAccount}))
  body = append(body, createRole(clientAccessRole, []string{account}))
  resources := tfResources(PolicyRoleMap, policiesPath, modulePath)
  body = append(body, resources...)

  var vars []string
  vars = append(vars, createVar(account))
  vars = append(vars, createVar(presetDevOpsAccount))
  vars = append(vars, createVar(presetTargetEnvAccount))
  writeFile(strings.Join(vars, "\n"), fmt.Sprintf("%s/required-variables.tf", modulePath))
  writeFile(strings.Join(body, "\n"), fmt.Sprintf("%s/main.tf", modulePath))
}

func createRole(name string, accountIds []string) string {
  var principals []string
  for _, act := range accountIds {
    principals = append(principals, fmt.Sprintf(`"arn:aws:iam::%s:root"`, act))
  }

  return fmt.Sprintf(`
resource "aws_iam_role" "%s" {
  name = "%s"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          AWS = [
            %s
          ]
        }
      }
    ]
  })
}
`, strings.Replace(name, "-", "_", -1), name, strings.Join(principals, ", "))
}

func createVar(name string) string {
  startIndex := strings.LastIndex(name, ".") + 1
  endIndex := len(name) - 1
  n := name[startIndex:endIndex]

  return strings.Replace(`
variable "<name>" {
  description = "<name> aws account number" 
  type = string
}`, "<name>", n, -1)
}

func writeFile(content, path string) {
  file, err := os.OpenFile(path, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
  if err != nil {
    fmt.Println(err)
    return
  }
  defer file.Close()

  formatted := hclwrite.Format([]byte(content))
  _, err = file.Write(formatted)
  if err != nil {
    fmt.Println(err)
    return
  }
}

func tfResources(policyRoleMappings []*generator.PolicyRoleMapping, policiesPath, modulePath string) []string {
  var resources []string
  cwd, err := os.Getwd()
  if err != nil {
    log.Fatalf("Failed to get current working directory: %v", err)
  }

  for _, policy := range policyRoleMappings {
    // read policy document from file
    fileName := filepath.Join(cwd, fmt.Sprintf("%s/%s.tpl", policiesPath, policy.PolicyName))
    doc, err := ioutil.ReadFile(fileName)
    if err != nil {
      log.Fatalf("error reading policy document from file %s: %v", fileName, err)
    }

    var roleResourceName string
    switch policy.RoleRef {
    case "workspaceProvisionerRole":
      roleResourceName = presetAdminRole
    case "clientAccessRole":
      roleResourceName = clientAccessRole
    }

    template := `

resource "aws_iam_policy" "<policy_name>" {
  name        = "<policy_name>"
  path        = "/"

  policy = templatefile("<policy_file_path>", { aws_account_id = var.aws_account_id })
}

resource "aws_iam_role_policy_attachment" "attach_<policy_name>" {
  role       = aws_iam_role.<role_name>.name
  policy_arn = aws_iam_policy.<policy_name>.arn
}`

    policyName := strings.Replace(policy.PolicyName, "-", "_", -1)
    roleName := strings.Replace(roleResourceName, "-", "_", -1)

    infraPolicyReplacement := "arn:aws:lambda:*:${aws_account_id}:function:datadog_log_monitoring"
    workspaceProvisionerPolicyReplacement := "arn:aws:kms:*:${aws_account_id}:alias/velero-backups-*"

    policyRelativeFilePath := fmt.Sprintf("${path.module}/iam_policies/%s.json.tpl", policy.PolicyName)
    policyAbsFilePath := fmt.Sprintf("%s/iam_policies/%s.json.tpl", modulePath, policy.PolicyName)

    resource := strings.Replace(template, "<policy_name>", policyName, -1)
    resource = strings.Replace(resource, "<role_name>", roleName, -1)
    resource = strings.Replace(resource, "<policy_file_path>", policyRelativeFilePath, -1)

    var data string

    switch policy.PolicyName {
    case "client-access-management":
      data = string(doc)
    case "infra":
      data = strings.Replace(string(doc), "<infra_replacement>", infraPolicyReplacement, -1)
    case "preset-provision-workspaces":
      data = strings.Replace(string(doc), "<kms_velero_replacement>", workspaceProvisionerPolicyReplacement, -1)
    }

    writeFile(data, policyAbsFilePath)

    resources = append(resources, resource)
  }
  return resources
}
